{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","onSubmit","this","handleSubmit","noValidate","htmlFor","type","placeholder","name","onchange","handleChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAiFeA,0LA5EX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,QAAME,SAAUC,KAAKC,aAAcC,YAAU,GAC3CP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,aAAf,cACLR,EAAAC,EAAAC,cAAA,SACGO,KAAK,OACLN,UAAU,GACVO,YAAY,aACZC,KAAK,YACLJ,YAAU,EACVK,SAAUP,KAAKQ,gBAIfb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,YAAf,aACLR,EAAAC,EAAAC,cAAA,SACGO,KAAK,OACLN,UAAU,GACVO,YAAY,YACZC,KAAK,WACLJ,YAAU,EACVK,SAAUP,KAAKQ,gBAIfb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,SAAf,SACLR,EAAAC,EAAAC,cAAA,SACGO,KAAK,QACLN,UAAU,GACVO,YAAY,QACZC,KAAK,QACLJ,YAAU,EACVK,SAAUP,KAAKQ,gBAIfb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,YAAf,YACLR,EAAAC,EAAAC,cAAA,SACGO,KAAK,OACLN,UAAU,GACVO,YAAY,WACZC,KAAK,WACLJ,YAAU,EACVK,SAAUP,KAAKQ,gBAIfb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,mBAAf,oBACLR,EAAAC,EAAAC,cAAA,SACGO,KAAK,OACLN,UAAU,GACVO,YAAY,mBACZC,KAAK,kBACLJ,YAAU,EACVK,SAAUP,KAAKQ,gBAGfb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZH,EAAAC,EAAAC,cAAA,UAAQO,KAAK,UAAb,mBAMPT,EAAAC,EAAAC,cAAA,yDAzEWY,cCSCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.71bd2a5d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport './App.css';\n\nclass App  extends Component{\n  render(){\n    return(\n      <div className=\"wrapper\">\n        <div className=\"form-wrapper\">\n          <h1>Register</h1>\n          <form onSubmit={this.handleSubmit} noValidate>\n            <div className=\"firstName\">\n              <label htmlFor=\"firstName\">First Name</label>\n         <input \n            type=\"text\" \n            className=\"\" \n            placeholder=\"First Name\" \n            name=\"firstname\" \n            noValidate\n            onchange={this.handleChange}\n            />\n            </div>\n    \n            <div className=\"lastName\">\n              <label htmlFor=\"lastName\">Last Name</label>\n         <input \n            type=\"text\" \n            className=\"\" \n            placeholder=\"Last Name\" \n            name=\"lastname\" \n            noValidate\n            onchange={this.handleChange}\n            />\n            </div>\n\n            <div className=\"email\">\n              <label htmlFor=\"email\">Email</label>\n         <input \n            type=\"email\" \n            className=\"\" \n            placeholder=\"email\" \n            name=\"email\" \n            noValidate\n            onchange={this.handleChange}\n            />\n            </div>\n    \n            <div className=\"password\">\n              <label htmlFor=\"password\">Password</label>\n         <input \n            type=\"text\" \n            className=\"\" \n            placeholder=\"Password\" \n            name=\"password\" \n            noValidate\n            onchange={this.handleChange}\n            />\n            </div>\n    \n            <div className=\"confirmPassword\">\n              <label htmlFor=\"confirmPassword\">Confirm Password</label>\n         <input \n            type=\"text\" \n            className=\"\" \n            placeholder=\"Confirm Password\" \n            name=\"confirmPassword\" \n            noValidate\n            onchange={this.handleChange}\n            />\n            </div>\n            <div className=\"createAccount\">\n               <button type=\"submit\">Register Now</button>\n\n            </div>\n          </form>\n\n        </div>\n        <small>Already Have an Account? Sign In</small>\n      </div> \n    );\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import registerServiceWorker from './registerServiceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n// registerServiceWorker();"],"sourceRoot":""}